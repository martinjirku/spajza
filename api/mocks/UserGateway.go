// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	entity "github.com/martinjirku/zasobar/entity"
	mock "github.com/stretchr/testify/mock"
)

// UserGateway is an autogenerated mock type for the UserGateway type
type UserGateway struct {
	mock.Mock
}

type UserGateway_Expecter struct {
	mock *mock.Mock
}

func (_m *UserGateway) EXPECT() *UserGateway_Expecter {
	return &UserGateway_Expecter{mock: &_m.Mock}
}

// CreateUser provides a mock function with given fields: user
func (_m *UserGateway) CreateUser(user entity.User) (*entity.User, error) {
	ret := _m.Called(user)

	var r0 *entity.User
	if rf, ok := ret.Get(0).(func(entity.User) *entity.User); ok {
		r0 = rf(user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(entity.User) error); ok {
		r1 = rf(user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserGateway_CreateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUser'
type UserGateway_CreateUser_Call struct {
	*mock.Call
}

// CreateUser is a helper method to define mock.On call
//   - user entity.User
func (_e *UserGateway_Expecter) CreateUser(user interface{}) *UserGateway_CreateUser_Call {
	return &UserGateway_CreateUser_Call{Call: _e.mock.On("CreateUser", user)}
}

func (_c *UserGateway_CreateUser_Call) Run(run func(user entity.User)) *UserGateway_CreateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(entity.User))
	})
	return _c
}

func (_c *UserGateway_CreateUser_Call) Return(_a0 *entity.User, _a1 error) *UserGateway_CreateUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetByEmail provides a mock function with given fields: email
func (_m *UserGateway) GetByEmail(email string) (*entity.User, error) {
	ret := _m.Called(email)

	var r0 *entity.User
	if rf, ok := ret.Get(0).(func(string) *entity.User); ok {
		r0 = rf(email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserGateway_GetByEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByEmail'
type UserGateway_GetByEmail_Call struct {
	*mock.Call
}

// GetByEmail is a helper method to define mock.On call
//   - email string
func (_e *UserGateway_Expecter) GetByEmail(email interface{}) *UserGateway_GetByEmail_Call {
	return &UserGateway_GetByEmail_Call{Call: _e.mock.On("GetByEmail", email)}
}

func (_c *UserGateway_GetByEmail_Call) Run(run func(email string)) *UserGateway_GetByEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *UserGateway_GetByEmail_Call) Return(_a0 *entity.User, _a1 error) *UserGateway_GetByEmail_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// Login provides a mock function with given fields: email, password
func (_m *UserGateway) Login(email string, password string) error {
	ret := _m.Called(email, password)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(email, password)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserGateway_Login_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Login'
type UserGateway_Login_Call struct {
	*mock.Call
}

// Login is a helper method to define mock.On call
//   - email string
//   - password string
func (_e *UserGateway_Expecter) Login(email interface{}, password interface{}) *UserGateway_Login_Call {
	return &UserGateway_Login_Call{Call: _e.mock.On("Login", email, password)}
}

func (_c *UserGateway_Login_Call) Run(run func(email string, password string)) *UserGateway_Login_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *UserGateway_Login_Call) Return(_a0 error) *UserGateway_Login_Call {
	_c.Call.Return(_a0)
	return _c
}

// Register provides a mock function with given fields: email, password
func (_m *UserGateway) Register(email string, password string) (*entity.User, error) {
	ret := _m.Called(email, password)

	var r0 *entity.User
	if rf, ok := ret.Get(0).(func(string, string) *entity.User); ok {
		r0 = rf(email, password)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(email, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserGateway_Register_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Register'
type UserGateway_Register_Call struct {
	*mock.Call
}

// Register is a helper method to define mock.On call
//   - email string
//   - password string
func (_e *UserGateway_Expecter) Register(email interface{}, password interface{}) *UserGateway_Register_Call {
	return &UserGateway_Register_Call{Call: _e.mock.On("Register", email, password)}
}

func (_c *UserGateway_Register_Call) Run(run func(email string, password string)) *UserGateway_Register_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *UserGateway_Register_Call) Return(_a0 *entity.User, _a1 error) *UserGateway_Register_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// UpdateUser provides a mock function with given fields: user
func (_m *UserGateway) UpdateUser(user entity.User) (*entity.User, error) {
	ret := _m.Called(user)

	var r0 *entity.User
	if rf, ok := ret.Get(0).(func(entity.User) *entity.User); ok {
		r0 = rf(user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(entity.User) error); ok {
		r1 = rf(user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserGateway_UpdateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateUser'
type UserGateway_UpdateUser_Call struct {
	*mock.Call
}

// UpdateUser is a helper method to define mock.On call
//   - user entity.User
func (_e *UserGateway_Expecter) UpdateUser(user interface{}) *UserGateway_UpdateUser_Call {
	return &UserGateway_UpdateUser_Call{Call: _e.mock.On("UpdateUser", user)}
}

func (_c *UserGateway_UpdateUser_Call) Run(run func(user entity.User)) *UserGateway_UpdateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(entity.User))
	})
	return _c
}

func (_c *UserGateway_UpdateUser_Call) Return(_a0 *entity.User, _a1 error) *UserGateway_UpdateUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

type mockConstructorTestingTNewUserGateway interface {
	mock.TestingT
	Cleanup(func())
}

// NewUserGateway creates a new instance of UserGateway. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUserGateway(t mockConstructorTestingTNewUserGateway) *UserGateway {
	mock := &UserGateway{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
