// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: queries.sql

package client

import (
	"context"
	"database/sql"
)

const createCategory = `-- name: CreateCategory :execlastid
INSERT INTO categories(created_at, updated_at, title, path, default_unit) VALUES (NOW(), NOW(),?,?,?)
`

type CreateCategoryParams struct {
	Title       sql.NullString
	Path        sql.NullString
	DefaultUnit sql.NullString
}

func (q *Queries) CreateCategory(ctx context.Context, arg *CreateCategoryParams) (int64, error) {
	result, err := q.exec(ctx, q.createCategoryStmt, createCategory, arg.Title, arg.Path, arg.DefaultUnit)
	if err != nil {
		return 0, err
	}
	return result.LastInsertId()
}

const deleteCategory = `-- name: DeleteCategory :exec
UPDATE categories SET updated_at=NOW(), deleted_at=NOW() WHERE id=?
`

func (q *Queries) DeleteCategory(ctx context.Context, id int32) error {
	_, err := q.exec(ctx, q.deleteCategoryStmt, deleteCategory, id)
	return err
}

const listCategories = `-- name: ListCategories :many

SELECT id, created_at, updated_at, deleted_at, title, default_unit, path FROM categories WHERE deleted_at IS null
`

// CATEGORIES:
func (q *Queries) ListCategories(ctx context.Context) ([]Category, error) {
	rows, err := q.query(ctx, q.listCategoriesStmt, listCategories)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Category
	for rows.Next() {
		var i Category
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.Title,
			&i.DefaultUnit,
			&i.Path,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCategory = `-- name: UpdateCategory :exec
UPDATE categories SET updated_at=NOW(),title=?,path=?,default_unit=? WHERE id=?
`

type UpdateCategoryParams struct {
	Title       sql.NullString
	Path        sql.NullString
	DefaultUnit sql.NullString
	ID          int32
}

func (q *Queries) UpdateCategory(ctx context.Context, arg *UpdateCategoryParams) error {
	_, err := q.exec(ctx, q.updateCategoryStmt, updateCategory,
		arg.Title,
		arg.Path,
		arg.DefaultUnit,
		arg.ID,
	)
	return err
}
