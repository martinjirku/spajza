//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var Users = newUsersTable("zasobar", "users", "")

type usersTable struct {
	mysql.Table

	// Columns
	ID            mysql.ColumnInteger
	CreatedAt     mysql.ColumnTimestamp
	UpdatedAt     mysql.ColumnTimestamp
	DeletedAt     mysql.ColumnTimestamp
	Password      mysql.ColumnString
	Email         mysql.ColumnString
	Name          mysql.ColumnString
	GivenName     mysql.ColumnString
	FamilyName    mysql.ColumnString
	Picture       mysql.ColumnString
	EmailVerified mysql.ColumnBool
	AuthProvider  mysql.ColumnInteger

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
}

type UsersTable struct {
	usersTable

	NEW usersTable
}

// AS creates new UsersTable with assigned alias
func (a UsersTable) AS(alias string) *UsersTable {
	return newUsersTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new UsersTable with assigned schema name
func (a UsersTable) FromSchema(schemaName string) *UsersTable {
	return newUsersTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new UsersTable with assigned table prefix
func (a UsersTable) WithPrefix(prefix string) *UsersTable {
	return newUsersTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new UsersTable with assigned table suffix
func (a UsersTable) WithSuffix(suffix string) *UsersTable {
	return newUsersTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newUsersTable(schemaName, tableName, alias string) *UsersTable {
	return &UsersTable{
		usersTable: newUsersTableImpl(schemaName, tableName, alias),
		NEW:        newUsersTableImpl("", "new", ""),
	}
}

func newUsersTableImpl(schemaName, tableName, alias string) usersTable {
	var (
		IDColumn            = mysql.IntegerColumn("id")
		CreatedAtColumn     = mysql.TimestampColumn("created_at")
		UpdatedAtColumn     = mysql.TimestampColumn("updated_at")
		DeletedAtColumn     = mysql.TimestampColumn("deleted_at")
		PasswordColumn      = mysql.StringColumn("password")
		EmailColumn         = mysql.StringColumn("email")
		NameColumn          = mysql.StringColumn("name")
		GivenNameColumn     = mysql.StringColumn("given_name")
		FamilyNameColumn    = mysql.StringColumn("family_name")
		PictureColumn       = mysql.StringColumn("picture")
		EmailVerifiedColumn = mysql.BoolColumn("email_verified")
		AuthProviderColumn  = mysql.IntegerColumn("auth_provider")
		allColumns          = mysql.ColumnList{IDColumn, CreatedAtColumn, UpdatedAtColumn, DeletedAtColumn, PasswordColumn, EmailColumn, NameColumn, GivenNameColumn, FamilyNameColumn, PictureColumn, EmailVerifiedColumn, AuthProviderColumn}
		mutableColumns      = mysql.ColumnList{CreatedAtColumn, UpdatedAtColumn, DeletedAtColumn, PasswordColumn, EmailColumn, NameColumn, GivenNameColumn, FamilyNameColumn, PictureColumn, EmailVerifiedColumn, AuthProviderColumn}
	)

	return usersTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:            IDColumn,
		CreatedAt:     CreatedAtColumn,
		UpdatedAt:     UpdatedAtColumn,
		DeletedAt:     DeletedAtColumn,
		Password:      PasswordColumn,
		Email:         EmailColumn,
		Name:          NameColumn,
		GivenName:     GivenNameColumn,
		FamilyName:    FamilyNameColumn,
		Picture:       PictureColumn,
		EmailVerified: EmailVerifiedColumn,
		AuthProvider:  AuthProviderColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
