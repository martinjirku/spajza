//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var StorageItems = newStorageItemsTable("zasobar", "storage_items", "")

type storageItemsTable struct {
	mysql.Table

	// Columns
	StorageItemID  mysql.ColumnInteger
	CreatedAt      mysql.ColumnTimestamp
	UpdatedAt      mysql.ColumnTimestamp
	DeletedAt      mysql.ColumnTimestamp
	Title          mysql.ColumnString
	StoragePlaceID mysql.ColumnInteger
	CategoryID     mysql.ColumnInteger
	BaselineAmount mysql.ColumnFloat
	CurrentAmount  mysql.ColumnFloat
	Quantity       mysql.ColumnString
	Unit           mysql.ColumnString
	ExpirationDate mysql.ColumnTimestamp
	Ean            mysql.ColumnString

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
}

type StorageItemsTable struct {
	storageItemsTable

	NEW storageItemsTable
}

// AS creates new StorageItemsTable with assigned alias
func (a StorageItemsTable) AS(alias string) *StorageItemsTable {
	return newStorageItemsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new StorageItemsTable with assigned schema name
func (a StorageItemsTable) FromSchema(schemaName string) *StorageItemsTable {
	return newStorageItemsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new StorageItemsTable with assigned table prefix
func (a StorageItemsTable) WithPrefix(prefix string) *StorageItemsTable {
	return newStorageItemsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new StorageItemsTable with assigned table suffix
func (a StorageItemsTable) WithSuffix(suffix string) *StorageItemsTable {
	return newStorageItemsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newStorageItemsTable(schemaName, tableName, alias string) *StorageItemsTable {
	return &StorageItemsTable{
		storageItemsTable: newStorageItemsTableImpl(schemaName, tableName, alias),
		NEW:               newStorageItemsTableImpl("", "new", ""),
	}
}

func newStorageItemsTableImpl(schemaName, tableName, alias string) storageItemsTable {
	var (
		StorageItemIDColumn  = mysql.IntegerColumn("storage_item_id")
		CreatedAtColumn      = mysql.TimestampColumn("created_at")
		UpdatedAtColumn      = mysql.TimestampColumn("updated_at")
		DeletedAtColumn      = mysql.TimestampColumn("deleted_at")
		TitleColumn          = mysql.StringColumn("title")
		StoragePlaceIDColumn = mysql.IntegerColumn("storage_place_id")
		CategoryIDColumn     = mysql.IntegerColumn("category_id")
		BaselineAmountColumn = mysql.FloatColumn("baseline_amount")
		CurrentAmountColumn  = mysql.FloatColumn("current_amount")
		QuantityColumn       = mysql.StringColumn("quantity")
		UnitColumn           = mysql.StringColumn("unit")
		ExpirationDateColumn = mysql.TimestampColumn("expiration_date")
		EanColumn            = mysql.StringColumn("ean")
		allColumns           = mysql.ColumnList{StorageItemIDColumn, CreatedAtColumn, UpdatedAtColumn, DeletedAtColumn, TitleColumn, StoragePlaceIDColumn, CategoryIDColumn, BaselineAmountColumn, CurrentAmountColumn, QuantityColumn, UnitColumn, ExpirationDateColumn, EanColumn}
		mutableColumns       = mysql.ColumnList{CreatedAtColumn, UpdatedAtColumn, DeletedAtColumn, TitleColumn, StoragePlaceIDColumn, CategoryIDColumn, BaselineAmountColumn, CurrentAmountColumn, QuantityColumn, UnitColumn, ExpirationDateColumn, EanColumn}
	)

	return storageItemsTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		StorageItemID:  StorageItemIDColumn,
		CreatedAt:      CreatedAtColumn,
		UpdatedAt:      UpdatedAtColumn,
		DeletedAt:      DeletedAtColumn,
		Title:          TitleColumn,
		StoragePlaceID: StoragePlaceIDColumn,
		CategoryID:     CategoryIDColumn,
		BaselineAmount: BaselineAmountColumn,
		CurrentAmount:  CurrentAmountColumn,
		Quantity:       QuantityColumn,
		Unit:           UnitColumn,
		ExpirationDate: ExpirationDateColumn,
		Ean:            EanColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
