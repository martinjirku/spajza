//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var StoragePlaces = newStoragePlacesTable("zasobar", "storage_places", "")

type storagePlacesTable struct {
	mysql.Table

	// Columns
	StoragePlaceID mysql.ColumnInteger
	CreatedAt      mysql.ColumnTimestamp
	UpdatedAt      mysql.ColumnTimestamp
	DeletedAt      mysql.ColumnTimestamp
	Title          mysql.ColumnString
	Code           mysql.ColumnString

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
}

type StoragePlacesTable struct {
	storagePlacesTable

	NEW storagePlacesTable
}

// AS creates new StoragePlacesTable with assigned alias
func (a StoragePlacesTable) AS(alias string) *StoragePlacesTable {
	return newStoragePlacesTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new StoragePlacesTable with assigned schema name
func (a StoragePlacesTable) FromSchema(schemaName string) *StoragePlacesTable {
	return newStoragePlacesTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new StoragePlacesTable with assigned table prefix
func (a StoragePlacesTable) WithPrefix(prefix string) *StoragePlacesTable {
	return newStoragePlacesTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new StoragePlacesTable with assigned table suffix
func (a StoragePlacesTable) WithSuffix(suffix string) *StoragePlacesTable {
	return newStoragePlacesTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newStoragePlacesTable(schemaName, tableName, alias string) *StoragePlacesTable {
	return &StoragePlacesTable{
		storagePlacesTable: newStoragePlacesTableImpl(schemaName, tableName, alias),
		NEW:                newStoragePlacesTableImpl("", "new", ""),
	}
}

func newStoragePlacesTableImpl(schemaName, tableName, alias string) storagePlacesTable {
	var (
		StoragePlaceIDColumn = mysql.IntegerColumn("storage_place_id")
		CreatedAtColumn      = mysql.TimestampColumn("created_at")
		UpdatedAtColumn      = mysql.TimestampColumn("updated_at")
		DeletedAtColumn      = mysql.TimestampColumn("deleted_at")
		TitleColumn          = mysql.StringColumn("title")
		CodeColumn           = mysql.StringColumn("code")
		allColumns           = mysql.ColumnList{StoragePlaceIDColumn, CreatedAtColumn, UpdatedAtColumn, DeletedAtColumn, TitleColumn, CodeColumn}
		mutableColumns       = mysql.ColumnList{CreatedAtColumn, UpdatedAtColumn, DeletedAtColumn, TitleColumn, CodeColumn}
	)

	return storagePlacesTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		StoragePlaceID: StoragePlaceIDColumn,
		CreatedAt:      CreatedAtColumn,
		UpdatedAt:      UpdatedAtColumn,
		DeletedAt:      DeletedAtColumn,
		Title:          TitleColumn,
		Code:           CodeColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
