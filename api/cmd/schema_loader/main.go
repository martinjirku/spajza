package main

import (
	"flag"
	"log"
	"os"

	"github.com/martinjirku/zasobar/config"
	"github.com/martinjirku/zasobar/infra/db"
)

// create a new schema loader from the database connection
func main() {
	var filePath string
	var dbConf config.Db

	flag.StringVar(&filePath, "output", "./sqlc.sql", "output schema file")
	flag.StringVar(&dbConf.Name, "name", "zasobar", "db name")
	flag.StringVar(&dbConf.User, "user", "user", "db name")
	flag.StringVar(&dbConf.Host, "host", "localhost", "db host")
	flag.StringVar(&dbConf.Port, "port", "3306", "db port")
	flag.StringVar(&dbConf.Password, "pwd", "", "db pwd")
	flag.StringVar(&dbConf.Type, "type", "mysql", "db type")
	flag.Parse()

	database := db.NewDB(dbConf)
	success := false
	if _, err := os.Stat(filePath); err == nil {
		backupPath := filePath + ".bak"
		log.Default().Printf("Backup file exists, creating backup to %s", backupPath)
		err := os.Rename(filePath, backupPath)
		if err != nil {
			panic(err)
		}
		defer func() {
			backupPath := filePath + ".bak"
			if success {
				log.Default().Printf("Backup file exists, removing backup %s", backupPath)
				err := os.Remove(backupPath)
				if err != nil {
					panic(err)
				}
				return
			}
			if _, err := os.Stat(backupPath); err == nil {
				println("Backup file exists, reverting to" + filePath + "...")
				err := os.Rename(backupPath, filePath)
				if err != nil {
					panic(err)
				}
			}
		}()
	}

	file, err := os.Create(filePath)
	if err != nil {
		panic(err)
	}
	defer file.Close()

	log.Default().Printf("Reading the list of tables")
	tables, err := database.Query("SHOW TABLES")
	if err != nil {
		panic(err)
	}

	file.Write([]byte("-- Database Schema, generated by zasobar, DO NOT EDIT!\n\n"))
	for tables.Next() {
		var tableName string
		tables.Scan(&tableName)
		log.Default().Printf("Writing table %q schema", tableName)
		table, err := database.Query("SHOW CREATE TABLE " + tableName)
		if err != nil {
			panic(err)
		}
		table.Next()
		var createTable string
		table.Scan(&tableName, &createTable)
		file.Write([]byte(createTable + ";\n\n"))
	}
	success = true
}
